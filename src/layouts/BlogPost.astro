---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
  import Recurso from "../components/Recurso.astro";
  import LatestContent from '../components/LatestContent.astro';
  import { getCollection } from 'astro:content';

  const posts = await getCollection('blog');
// Obtener posts de las tres carpetas
const postsIA = await getCollection('inteligenciaartificial');
const postsBlog = await getCollection('blog');
const postsTech = await getCollection('tecnologia');
const viralPosts = await getCollection('viral'); 
const recursoPosts = await getCollection('recurso'); 

const getPostUrl = (post: any) => {
  if (postsIA.includes(post)) return `/inteligenciaartificial/${post.id}/`;
  if (postsBlog.includes(post)) return `/blog/${post.id}/`;
  if (postsTech.includes(post)) return `/tecnologia/${post.id}/`;
  if (viralPosts.includes(post)) return `/viral/${post.id}/`; 
  if (recursoPosts.includes(post)) return `/recurso/${post.id}/`;
  return `/${post.id}/`; // fallback
};
// Unir los posts de todas las categorÃ­as
const allPosts = [...postsIA, ...postsBlog, ...postsTech];
// Filtrar y ordenar los posts por fecha (usando getTime para realizar la resta)
const sortedPosts = allPosts
  .filter((post: any) => !!post.data.pubDate)
  .sort((a: any, b: any) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const { title, description, pubDate, updatedDate, heroImage, tags = [] } = 
  Astro.props as CollectionEntry<'blog'>['data'];
  const sidebarPosts = sortedPosts.slice(0, 6); // Obtiene los 3 posts mÃ¡s recientes para la barra lateral



---

<html lang="en">
<head>
    <BaseHead title={title} description={description} />
    <style>
        main {
            width: 100%;
            margin: 0;
            padding: 0;
            margin-top: 1rem;
        }
        .hero-image {
            width: 100%;
        }
        .hero-image img {
            display: block;
            margin: 0 auto;
            border-radius: 12px;
            box-shadow: var(--box-shadow);
        }
        .prose {
            width: 100%;
            max-width: 800px;
            margin: auto;
            padding: 0 2px;
            color: rgb(var(--gray-dark));
        }
        .title {
            margin-bottom: 1em;
            padding: 1em 0;
            text-align: center;
            line-height: 1;
        }
        .title h1 {
            margin: 0 0 0.5em 0;
        }
        .meta-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            max-width: 800px;
            margin: 0 auto;
            padding: 0.5rem 5px;
            font-size: 0.9rem;
            color: rgb(var(--gray));
        }
        .date {
            margin-bottom: 0.5em;
            color: rgb(var(--gray));
        }
        .last-updated-on {
            font-style: italic;
        }
        .tags {
            display: flex;
            gap: 0.5rem;
            list-style: none;
            padding: 0;
        }
        .tag {
            
            color: #616161;
            background-color: #e0e0e000;
            padding: 0.3rem 0.6rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
            font-size: 0.85rem;
        }
        .tag:hover {
            background-color: #cecece00;
        }
    </style>
</head>
<body>
    <Header />
    <main>
        <article>
            <div class="prose">
                <h1>{title}</h1>
                <div class="hero-image">
                    {heroImage && <img width={800} height={400} src={heroImage} alt="" />}
                </div>
                <div class="meta-info">
                    <div class="date">
                        <FormattedDate date={pubDate} />
                        {updatedDate && (
                            <span class="last-updated-on"> - Ãšltima actualizaciÃ³n el <FormattedDate date={updatedDate} /></span>
                        )}
                    </div>
                    {tags.length > 0 && (
                        <div class="tags">
                            {tags.map((tag: string) => (
                                <span class="tag">{tag}</span>
                            ))}
                        </div>
                    )}
                </div>

                <hr />

                <slot />
            </div>
        </article>
    </main>
    <section class="w-full flex flex-col lg:flex-row justify-center gap-6 mx-auto px-4">
        <!-- Ãšltimas Entradas -->
        <section class="bg-gray-100 p-4 rounded-lg shadow-lg w-full lg:w-1/2">
          <h2 class="text-xl font-semibold mb-3 text-blue-600">ðŸ“Œ Ãšltimas Entradas</h2>
          <ul class="list-none space-y-2">
            {sidebarPosts.map((post) => (
              <li class="flex items-start space-x-4">
                <!-- Imagen con tamaÃ±o fijo y sin deformarse -->
                <img src={post.data.heroImage} alt={post.data.title} class="w-20 h-20 object-cover rounded-lg" />
                
                <!-- Enlace con texto completo pero sin deformar el contenedor -->
                <a href={getPostUrl(post)} class="text-blue-600 text-[0.95rem] hover:underline block w-full">
                  <span class="block overflow-hidden text-ellipsis">{post.data.title}</span>
                </a>
              </li>
            ))}
          </ul>
        </section>
      
        <!-- Latest Content -->
        <LatestContent class="w-full lg:w-1/2" />
      </section>
      
      
    <aside class="w-full md:w-1/3 xl:w-1/4 flex">
        
        
      </aside>
      
    <Recurso/>
    <Footer />
</body>
</html>